<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
  xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                      http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">
  <changeSet author="pwadmore" id="changelog-create-is-timeseries-staging-exception-active-function">
    <sql splitStatements="false">
      <![CDATA[CREATE OR ALTER FUNCTION FFF_STAGING.IS_TIMESERIES_STAGING_EXCEPTION_ACTIVE (@id UNIQUEIDENTIFIER) RETURNS BIT
      AS
      BEGIN
        DECLARE @active BIT;
        DECLARE @workflowId NVARCHAR(64);

        SELECT
          @workflowId = (WORKFLOW_ID)
        FROM
          FFF_STAGING.TIMESERIES_STAGING_EXCEPTION tse
          INNER JOIN FFF_STAGING.TIMESERIES_HEADER th ON tse.TIMESERIES_HEADER_ID = th.ID
        WHERE
          tse.ID = @id;

        -- The latest timeseries header if the timeseries staging exception is linked to a forecast workflow.
        WITH lfth_cte (ID, TASK_RUN_ID, WORKFLOW_ID) AS
        (
          SELECT
            tr.ID,
            tr.TASK_RUN_ID,
            tr.WORKFLOW_ID
          FROM
            (
              SELECT
                DENSE_RANK() OVER(PARTITION BY WORKFLOW_ID ORDER BY TASK_COMPLETION_TIME DESC) AS DENSE_RANK,
                ID,
                TASK_RUN_ID,
                WORKFLOW_ID
              FROM
                FFF_STAGING.TIMESERIES_HEADER
              WHERE
                WORKFLOW_ID = @workflowId AND
                FORECAST = 1
              UNION
              SELECT
                DENSE_RANK() OVER(PARTITION BY th1.WORKFLOW_ID ORDER BY th1.TASK_COMPLETION_TIME DESC) AS DENSE_RANK,
                th1.ID,
                TASK_RUN_ID,
                th1.WORKFLOW_ID
              FROM
                FFF_STAGING.TIMESERIES_HEADER th1
              WHERE
                -- If a workflow spans plots and filters the forecast flag in the timeseries header
                -- record is set to 1. As such, do not include it when filtering data.
                WORKFLOW_ID = @workflowId AND
                EXISTS
                (
                  SELECT
                    1
                  FROM
                    FFF_STAGING.TIMESERIES_HEADER th2
                    INNER JOIN FFF_STAGING.NON_DISPLAY_GROUP_WORKFLOW ndgw
                      WITH
                        (TABLOCK HOLDLOCK)
                      ON ndgw.WORKFLOW_ID = th2.WORKFLOW_ID
                  WHERE
                    ndgw.TIMESERIES_TYPE IN ('external_forecasting', 'simulated_forecasting') AND
                    th1.ID = th2.ID
                )
            ) AS tr -- All task runs (timeseries headers) for each forecast workflow
            WHERE
              tr.DENSE_RANK = 1
        ),
        -- Is the timeseries staging exception associated with a current forecast?
        lftse_cte (TIMESERIES_STAGING_EXCEPTION_ID, TIMESERIES_HEADER_ID, SOURCE_ID, SOURCE_TYPE, DESCRIPTION, EXCEPTION_TIME) AS
        (
          SELECT
            rtse.ID AS TIMESERIES_STAGING_EXCEPTION_ID,
            rtse.TIMESERIES_HEADER_ID,
            rtse.SOURCE_ID,
            rtse.SOURCE_TYPE,
            rtse.DESCRIPTION,
            rtse.EXCEPTION_TIME
          FROM
            (
              SELECT
                DENSE_RANK() OVER(PARTITION BY tse.TIMESERIES_HEADER_ID, tse.SOURCE_ID ORDER BY tse.EXCEPTION_TIME DESC) AS DENSE_RANK,
                tse.ID,
                tse.TIMESERIES_HEADER_ID,
                tse.SOURCE_ID,
                tse.SOURCE_TYPE,
                tse.DESCRIPTION,
                tse.EXCEPTION_TIME
              FROM
                FFF_STAGING.TIMESERIES_STAGING_EXCEPTION tse
                INNER JOIN lfth_cte ON lfth_cte.ID = tse.TIMESERIES_HEADER_ID
              WHERE
                tse.id = @id
            ) AS rtse
          WHERE
            rtse.DENSE_RANK = 1
        )

        SELECT
          @active = (CAST(COUNT(TIMESERIES_STAGING_EXCEPTION_ID) AS BIT))
        FROM
          (
            -- All timeseries staging exceptions for each non-forecast associated with an unknown timeseries type.
            SELECT
              tse.ID AS TIMESERIES_STAGING_EXCEPTION_ID
            FROM
              FFF_STAGING.TIMESERIES_STAGING_EXCEPTION tse
              INNER JOIN FFF_STAGING.TIMESERIES_HEADER th ON tse.TIMESERIES_HEADER_ID = th.ID
              INNER JOIN FFF_STAGING.NON_DISPLAY_GROUP_WORKFLOW ndgw
                WITH
                  (TABLOCK HOLDLOCK)
                ON tse.SOURCE_ID = ndgw.FILTER_ID AND th.WORKFLOW_ID = ndgw.WORKFLOW_ID
            WHERE
              -- If a workflow spans plots and filters the forecast flag in the timeseries header
              -- record is set to 1. As such, do not include it when filtering data.
              tse.ID = @id AND
              tse.SOURCE_TYPE = 'F' AND
              ndgw.TIMESERIES_TYPE NOT IN ('external_forecasting', 'external_historical', 'simulated_forecasting')
            UNION
            -- All timeseries staging exceptions for each non-forecast without associated timeseries.
            SELECT
              tse.ID AS TIMESERIES_STAGING_EXCEPTION_ID
            FROM
              FFF_STAGING.TIMESERIES_STAGING_EXCEPTION tse
              INNER JOIN FFF_STAGING.TIMESERIES_HEADER th ON tse.TIMESERIES_HEADER_ID = th.ID
              INNER JOIN FFF_STAGING.NON_DISPLAY_GROUP_WORKFLOW ndgw
                WITH
                  (TABLOCK HOLDLOCK)
                ON tse.SOURCE_ID = ndgw.FILTER_ID
                AND th.WORKFLOW_ID = ndgw.WORKFLOW_ID
            WHERE
              -- If a workflow spans plots and filters the forecast flag in the timeseries header
              -- record is set to 1. As such, do not include it when filtering data.
              tse.ID = @id AND
              tse.SOURCE_TYPE = 'F' AND
              ndgw.TIMESERIES_TYPE = 'external_historical' AND
              NOT EXISTS (
                SELECT
                  t.id
                FROM
                  FFF_STAGING.TIMESERIES t
                 WHERE
                  t.TIMESERIES_HEADER_ID = th.ID AND
                  t.SOURCE_TYPE = 'F' AND
                  t.SOURCE_ID = tse.SOURCE_ID
                )
            UNION
            -- All timeseries staging exceptions associated with unknown plots/filters.
            -- Known CSV related timeseries staging exceptions must have been created after the corresponding
            -- CSV workflow file was last refreshed.  If the timeseries staging
            -- exception was created at an earlier time, treat the unknown plot/filter as a
            -- corrected typo.
            SELECT
              tse.ID AS TIMESERIES_STAGING_EXCEPTION_ID
            FROM
              FFF_STAGING.TIMESERIES_STAGING_EXCEPTION tse
              INNER JOIN FFF_STAGING.WORKFLOW_REFRESH wr
                ON tse.CSV_TYPE = wr.CSV_TYPE
            WHERE
              tse.ID = @id AND
              tse.CSV_ERROR = 1 AND
              tse.EXCEPTION_TIME > wr.REFRESH_TIME
            UNION
            -- Unknown CSV related timeseries staging exceptions must have been
            -- created after all CSV workflow files were last refreshed. If the timeseries staging
            -- exception was created at an earlier time, treat the unknown plot/filter as a
            -- corrected typo.
            SELECT
              tse.ID AS TIMESERIES_STAGING_EXCEPTION_ID
            FROM
              FFF_STAGING.TIMESERIES_STAGING_EXCEPTION tse
            WHERE
              tse.ID = @id AND
              tse.CSV_ERROR = 1 AND
              tse.CSV_TYPE = 'U' AND
              tse.EXCEPTION_TIME >
                (
                  SELECT TOP(1)
                    REFRESH_TIME
                  FROM
                    FFF_STAGING.WORKFLOW_REFRESH
                  ORDER BY
                    REFRESH_TIME
                )
            UNION
            -- All timeseries staging exceptions for each current coastal forecast without associated timeseries.
            SELECT
              tse.ID AS TIMESERIES_STAGING_EXCEPTION_ID
            FROM
              FFF_STAGING.TIMESERIES_STAGING_EXCEPTION tse
              INNER JOIN FFF_STAGING.TIMESERIES_HEADER th ON tse.TIMESERIES_HEADER_ID = th.ID
              INNER JOIN lfth_cte ON tse.TIMESERIES_HEADER_ID = lfth_cte.ID AND th.ID = lfth_cte.ID 
              INNER JOIN FFF_STAGING.COASTAL_DISPLAY_GROUP_WORKFLOW cdgw
                WITH
                  (TABLOCK HOLDLOCK)
                ON tse.SOURCE_ID = cdgw.PLOT_ID AND lfth_cte.WORKFLOW_ID = cdgw.WORKFLOW_ID
            WHERE
              tse.ID = @id AND
              tse.SOURCE_TYPE = 'P' AND
              NOT EXISTS (
                SELECT
                  t.id
                FROM
                  FFF_STAGING.TIMESERIES t
                WHERE
                  t.TIMESERIES_HEADER_ID = lfth_cte.ID AND
                  t.SOURCE_TYPE = 'P' AND
                  t.SOURCE_ID = tse.SOURCE_ID
                )
            UNION
            -- All timeseries staging exceptions for each current fluvial forecast without associated timeseries.
            SELECT
              tse.ID AS TIMESERIES_STAGING_EXCEPTION_ID
            FROM
              FFF_STAGING.TIMESERIES_STAGING_EXCEPTION tse
              INNER JOIN FFF_STAGING.TIMESERIES_HEADER th ON tse.TIMESERIES_HEADER_ID = th.ID
              INNER JOIN lfth_cte ON tse.TIMESERIES_HEADER_ID = lfth_cte.ID AND th.ID = lfth_cte.ID 
              INNER JOIN FFF_STAGING.FLUVIAL_DISPLAY_GROUP_WORKFLOW fdgw
                WITH
                  (TABLOCK HOLDLOCK)
                ON tse.SOURCE_ID = fdgw.PLOT_ID AND lfth_cte.WORKFLOW_ID = fdgw.WORKFLOW_ID
            WHERE
              tse.ID = @id AND
              tse.SOURCE_TYPE = 'P' AND
              NOT EXISTS
                (
                  SELECT
                    t.id
                  FROM
                    FFF_STAGING.TIMESERIES t
                  WHERE
                    t.TIMESERIES_HEADER_ID = lfth_cte.ID AND
                    t.SOURCE_TYPE = 'P' AND
                    t.SOURCE_ID = tse.SOURCE_ID
                )
            UNION
            -- All timeseries staging exceptions for each current external or simulated forecast without associated timeseries.
            SELECT
              tse.ID AS TIMESERIES_STAGING_EXCEPTION_ID
            FROM
              FFF_STAGING.TIMESERIES_STAGING_EXCEPTION tse
              INNER JOIN FFF_STAGING.TIMESERIES_HEADER th ON tse.TIMESERIES_HEADER_ID = th.ID
              INNER JOIN lfth_cte ON tse.TIMESERIES_HEADER_ID = lfth_cte.ID AND th.ID = lfth_cte.ID 
              INNER JOIN FFF_STAGING.NON_DISPLAY_GROUP_WORKFLOW ndgw
                WITH
                  (TABLOCK HOLDLOCK)
                ON tse.SOURCE_ID = ndgw.FILTER_ID AND lfth_cte.WORKFLOW_ID = ndgw.WORKFLOW_ID
            WHERE
              tse.ID = @id AND
              tse.SOURCE_TYPE = 'F' AND
              ndgw.TIMESERIES_TYPE IN ('external_forecasting', 'simulated_forecasting') AND
              NOT EXISTS (
                SELECT
                  t.id
                FROM
                  FFF_STAGING.TIMESERIES t
                WHERE
                  t.TIMESERIES_HEADER_ID = lfth_cte.ID AND
                  t.SOURCE_TYPE = 'F' AND
                  t.SOURCE_ID = tse.SOURCE_ID
                )
            UNION
            --  For the latest timeseries staging exception associated with each plot
            --  calculate the set of locations that have not been imported.
            SELECT
              TIMESERIES_STAGING_EXCEPTION_ID
            FROM
              (
                (
                  -- The set of coastal locations linked to the latest timeseries staging exception for each plot.
                  SELECT
                    lftse_cte.TIMESERIES_STAGING_EXCEPTION_ID,
                    lfth_cte.ID AS TIMESERIES_HEADER_ID,
                    cdgw.WORKFLOW_ID,
                    VALUE AS LOCATION_ID
                  FROM
                    lfth_cte
                    INNER JOIN lftse_cte ON lftse_cte.TIMESERIES_HEADER_ID = lfth_cte.ID
                    INNER JOIN FFF_STAGING.COASTAL_DISPLAY_GROUP_WORKFLOW cdgw
                      WITH
                        (TABLOCK HOLDLOCK)
                      ON lfth_cte.WORKFLOW_ID = cdgw.WORKFLOW_ID AND lftse_cte.SOURCE_ID = cdgw.PLOT_ID
                        CROSS APPLY STRING_SPLIT(LOCATION_IDS, ';')
                  WHERE
                    lftse_cte.TIMESERIES_STAGING_EXCEPTION_ID = @id
                  UNION
                  -- The set of fluvial locations linked to the latest timeseries staging exception for each plot.
                  SELECT
                    lftse_cte.TIMESERIES_STAGING_EXCEPTION_ID,
                    lfth_cte.ID AS TIMESERIES_HEADER_ID,
                    fdgw.WORKFLOW_ID,
                    VALUE AS LOCATION_ID
                  FROM
                    lfth_cte
                    INNER JOIN lftse_cte ON lftse_cte.TIMESERIES_HEADER_ID = lfth_cte.ID
                    INNER JOIN FFF_STAGING.FLUVIAL_DISPLAY_GROUP_WORKFLOW fdgw
                      WITH
                        (TABLOCK HOLDLOCK)
                      ON lfth_cte.WORKFLOW_ID = fdgw.WORKFLOW_ID AND lftse_cte.SOURCE_ID = fdgw.PLOT_ID
                        CROSS APPLY STRING_SPLIT(LOCATION_IDS, ';')
                  WHERE
                    lftse_cte.TIMESERIES_STAGING_EXCEPTION_ID = @id
                 )
                EXCEPT
                -- The set of imported locations linked to the latest timeseries staging exception for each plot.
                SELECT
                  lftse_cte.TIMESERIES_STAGING_EXCEPTION_ID,
                  lfth_cte.ID AS TIMESERIES_HEADER_ID,
                  lfth_cte.WORKFLOW_ID,
                  VALUE AS LOCATION_ID
                FROM
                  lfth_cte -- The latest task run (timeseries header) for each forecast workflow.
                  INNER JOIN lftse_cte ON lftse_cte.TIMESERIES_HEADER_ID = lfth_cte.ID
                  INNER JOIN FFF_STAGING.TIMESERIES t
                    ON t.TIMESERIES_HEADER_ID = lfth_cte.ID AND
                    t.TIMESERIES_HEADER_ID = lftse_cte.TIMESERIES_HEADER_ID AND
                    t.TIMESERIES_HEADER_ID = lfth_cte.ID
                  CROSS APPLY STRING_SPLIT(
                    REPLACE(
                      SUBSTRING(t.FEWS_PARAMETERS, CHARINDEX('&locationIds=', t.FEWS_PARAMETERS),  CHARINDEX('&startTime=', t.FEWS_PARAMETERS) - CHARINDEX('&locationIds=', t.FEWS_PARAMETERS)),
                      '&locationIds=',
                      ';'
                    ),
                    ';'
                  )
                  WHERE
                    lftse_cte.TIMESERIES_STAGING_EXCEPTION_ID = @id
                ) ml -- Missing locations
          ) a -- Active timeseries staging exceptions
        RETURN @active;
      END]]>
    </sql>
    <rollback>
      <sql>
        IF OBJECT_ID('FFF_STAGING.IS_TIMESERIES_STAGING_EXCEPTION_ACTIVE', 'FN') IS NOT NULL
          DROP FUNCTION FFF_STAGING.IS_TIMESERIES_STAGING_EXCEPTION_ACTIVE
      </sql>
    </rollback>
  </changeSet>
</databaseChangeLog>
