<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
  xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                      http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">
  <changeSet author="pwadmore" id="changelog-create-active-timeseries-staging-exception-for-missing-timeseries-view">
    <sql>
      CREATE OR ALTER VIEW FFF_STAGING.V_ACTIVE_TIMESERIES_STAGING_EXCEPTION_FOR_MISSING_TIMESERIES AS
      -- The latest timeseries header for each forecast workflow.
      WITH lfth_cte (ID, TASK_RUN_ID, WORKFLOW_ID) AS
      (
        SELECT
          tr.ID,
          tr.TASK_RUN_ID,
          tr.WORKFLOW_ID
        FROM
          (
            SELECT
              DENSE_RANK() OVER(PARTITION BY WORKFLOW_ID ORDER BY TASK_COMPLETION_TIME DESC) AS DENSE_RANK,
	            ID,
              TASK_RUN_ID,
	            WORKFLOW_ID
            FROM
              FFF_STAGING.TIMESERIES_HEADER
            WHERE
	            FORECAST = 1
		        UNION
		        SELECT
              DENSE_RANK() OVER(PARTITION BY th1.WORKFLOW_ID ORDER BY th1.TASK_COMPLETION_TIME DESC) AS DENSE_RANK,
		          th1.ID,
              TASK_RUN_ID,
		          th1.WORKFLOW_ID
		        FROM
		          FFF_STAGING.TIMESERIES_HEADER th1
		        WHERE
              -- If a workflow spans plots and filters the forecast flag in the timeseries header
              -- record is set to 1. As such, do not include it when filtering data.
		          EXISTS
			        (
			          SELECT
				          1
			          FROM
				          FFF_STAGING.TIMESERIES_HEADER th2
				          INNER JOIN FFF_STAGING.NON_DISPLAY_GROUP_WORKFLOW ndgw ON ndgw.WORKFLOW_ID = th2.WORKFLOW_ID
			          WHERE
                  ndgw.TIMESERIES_TYPE IN ('external_forecasting', 'simulated_forecasting') AND
                  th1.ID = th2.ID
			        )
          ) AS tr -- All task runs (timeseries headers) for each forecast workflow
          WHERE
            tr.DENSE_RANK = 1
      )

      -- All timeseries staging exceptions for each non-forecast associated with an unknown timeseries type.
      SELECT
        th.TASK_RUN_ID,
        tse.SOURCE_ID,
        tse.SOURCE_TYPE,
        tse.DESCRIPTION,
        tse.EXCEPTION_TIME,
        tse.ID AS TIMESERIES_STAGING_EXCEPTION_ID,
        tse.TIMESERIES_HEADER_ID
      FROM
        FFF_STAGING.TIMESERIES_STAGING_EXCEPTION tse
        INNER JOIN FFF_STAGING.TIMESERIES_HEADER th ON tse.TIMESERIES_HEADER_ID = th.ID
        INNER JOIN FFF_STAGING.NON_DISPLAY_GROUP_WORKFLOW ndgw ON tse.SOURCE_ID = ndgw.FILTER_ID AND th.WORKFLOW_ID = ndgw.WORKFLOW_ID
      WHERE
        -- If a workflow spans plots and filters the forecast flag in the timeseries header
        -- record is set to 1. As such, do not include it when filtering data.
        tse.SOURCE_TYPE = 'F' AND
        ndgw.TIMESERIES_TYPE NOT IN ('external_forecasting', 'external_historical', 'simulated_forecasting')
      UNION
      -- All timeseries staging exceptions associated with unknown plots/filters.
      SELECT
        th.TASK_RUN_ID,
        tse.SOURCE_ID,
        tse.SOURCE_TYPE,
        tse.DESCRIPTION,
        tse.EXCEPTION_TIME,
        tse.ID AS TIMESERIES_STAGING_EXCEPTION_ID,
        tse.TIMESERIES_HEADER_ID
      FROM
        FFF_STAGING.TIMESERIES_STAGING_EXCEPTION tse
        INNER JOIN FFF_STAGING.TIMESERIES_HEADER th ON tse.TIMESERIES_HEADER_ID = th.ID
      WHERE
        NOT EXISTS
          (
            SELECT
              1
            FROM
              FFF_STAGING.V_WORKFLOW w
            WHERE
              tse.SOURCE_ID = w.SOURCE_ID AND
              tse.SOURCE_TYPE = w.SOURCE_TYPE
          )
      UNION
      -- All timeseries staging exceptions for each non-forecast without associated timeseries.
      SELECT
        th.TASK_RUN_ID,
        tse.SOURCE_ID,
        tse.SOURCE_TYPE,
        tse.DESCRIPTION,
        tse.EXCEPTION_TIME,
        tse.ID AS TIMESERIES_STAGING_EXCEPTION_ID,
        tse.TIMESERIES_HEADER_ID
      FROM
        FFF_STAGING.TIMESERIES_STAGING_EXCEPTION tse
        INNER JOIN FFF_STAGING.TIMESERIES_HEADER th ON tse.TIMESERIES_HEADER_ID = th.ID
        INNER JOIN FFF_STAGING.NON_DISPLAY_GROUP_WORKFLOW ndgw ON tse.SOURCE_ID = ndgw.FILTER_ID AND th.WORKFLOW_ID = ndgw.WORKFLOW_ID
      WHERE
        -- If a workflow spans plots and filters the forecast flag in the timeseries header
        -- record is set to 1. As such, do not include it when filtering data.
        tse.SOURCE_TYPE = 'F' AND
        ndgw.TIMESERIES_TYPE = 'external_historical' AND
        NOT EXISTS (
          SELECT
            t.id
          FROM
            FFF_STAGING.TIMESERIES t
            WHERE
            t.TIMESERIES_HEADER_ID = th.ID AND
            t.SOURCE_TYPE = 'F' AND
            t.SOURCE_ID = tse.SOURCE_ID
          )
      UNION
      -- All timeseries staging exceptions for each current coastal forecast without associated timeseries.
      SELECT
        lfth_cte.TASK_RUN_ID,
        tse.SOURCE_ID,
        tse.SOURCE_TYPE,
        tse.DESCRIPTION,
        tse.EXCEPTION_TIME,
        tse.ID AS TIMESERIES_STAGING_EXCEPTION_ID,
        tse.TIMESERIES_HEADER_ID
      FROM
        FFF_STAGING.TIMESERIES_STAGING_EXCEPTION tse
        INNER JOIN lfth_cte
           ON tse.TIMESERIES_HEADER_ID = lfth_cte.ID
        INNER JOIN FFF_STAGING.COASTAL_DISPLAY_GROUP_WORKFLOW cdgw
           ON tse.SOURCE_ID = cdgw.PLOT_ID AND
           lfth_cte.WORKFLOW_ID = cdgw.WORKFLOW_ID
      WHERE
        tse.SOURCE_TYPE = 'P' AND
        NOT EXISTS (
          SELECT
            t.id
          FROM
            FFF_STAGING.TIMESERIES t
          WHERE
            t.TIMESERIES_HEADER_ID = lfth_cte.ID AND
            t.SOURCE_TYPE = 'P' AND
            t.SOURCE_ID = tse.SOURCE_ID
          )
      UNION
      -- All timeseries staging exceptions for each current fluvial forecast without associated timeseries.
      SELECT
        lfth_cte.TASK_RUN_ID,
        tse.SOURCE_ID,
        tse.SOURCE_TYPE,
        tse.DESCRIPTION,
        tse.EXCEPTION_TIME,
        tse.ID AS TIMESERIES_STAGING_EXCEPTION_ID,
        tse.TIMESERIES_HEADER_ID
      FROM
        FFF_STAGING.TIMESERIES_STAGING_EXCEPTION tse
        INNER JOIN lfth_cte
           ON tse.TIMESERIES_HEADER_ID = lfth_cte.ID
        INNER JOIN FFF_STAGING.FLUVIAL_DISPLAY_GROUP_WORKFLOW fdgw
           ON tse.SOURCE_ID = fdgw.PLOT_ID
           AND lfth_cte.WORKFLOW_ID = fdgw.WORKFLOW_ID
      WHERE
        tse.SOURCE_TYPE = 'P' AND
        NOT EXISTS
          (
            SELECT
              t.id
            FROM
              FFF_STAGING.TIMESERIES t
            WHERE
              t.TIMESERIES_HEADER_ID = lfth_cte.ID AND
              t.SOURCE_TYPE = 'P' AND
              t.SOURCE_ID = tse.SOURCE_ID
          )
      UNION
      -- All timeseries staging exceptions for each external or simulated forecast without associated timeseries.
      SELECT
        lfth_cte.TASK_RUN_ID,
        tse.SOURCE_ID,
        tse.SOURCE_TYPE,
        tse.DESCRIPTION,
        tse.EXCEPTION_TIME,
        tse.ID AS TIMESERIES_STAGING_EXCEPTION_ID,
        tse.TIMESERIES_HEADER_ID
      FROM
        FFF_STAGING.TIMESERIES_STAGING_EXCEPTION tse
        INNER JOIN lfth_cte
          ON tse.TIMESERIES_HEADER_ID = lfth_cte.ID
        INNER JOIN FFF_STAGING.NON_DISPLAY_GROUP_WORKFLOW ndgw
          ON tse.SOURCE_ID = ndgw.FILTER_ID AND
          lfth_cte.WORKFLOW_ID = ndgw.WORKFLOW_ID
      WHERE
        tse.SOURCE_TYPE = 'F' AND
        ndgw.TIMESERIES_TYPE IN ('external_forecasting', 'simulated_forecasting') AND
        NOT EXISTS (
          SELECT
            t.id
          FROM
            FFF_STAGING.TIMESERIES t
          WHERE
            t.TIMESERIES_HEADER_ID = lfth_cte.ID AND
            t.SOURCE_TYPE = 'F' AND
            t.SOURCE_ID = tse.SOURCE_ID
          )      
    </sql>
    <rollback>
      <sql>
        IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_SCHEMA = 'FFF_STAGING' AND TABLE_NAME = 'V_ACTIVE_TIMESERIES_STAGING_EXCEPTION_FOR_MISSING_TIMESERIES')
          DROP VIEW FFF_STAGING.V_ACTIVE_TIMESERIES_STAGING_EXCEPTION_FOR_MISSING_TIMESERIES
      </sql>
    </rollback>
  </changeSet>
</databaseChangeLog>
