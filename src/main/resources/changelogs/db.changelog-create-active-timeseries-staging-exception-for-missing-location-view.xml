<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
  xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                      http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">
  <changeSet author="pwadmore" id="changelog-create-active-timeseries-staging-exception-for-missing-location-view">
    <sql>
      <![CDATA[CREATE OR ALTER VIEW FFF_STAGING.V_ACTIVE_TIMESERIES_STAGING_EXCEPTIONS_FOR_MISSING_LOCATIONS AS
      -- The latest timeseries header for each forecast workflow.
      WITH lfth_cte (ID, TASK_RUN_ID, WORKFLOW_ID) AS
      (
        SELECT
          tr.ID,
          tr.TASK_RUN_ID,
          tr.WORKFLOW_ID
        FROM
          (
            SELECT
              DENSE_RANK() OVER(PARTITION BY WORKFLOW_ID ORDER BY TASK_COMPLETION_TIME DESC) AS DENSE_RANK,
	            ID,
              TASK_RUN_ID,
	            WORKFLOW_ID
            FROM
              FFF_STAGING.TIMESERIES_HEADER
            WHERE
	            FORECAST = 1
		        UNION
		        SELECT
              DENSE_RANK() OVER(PARTITION BY th1.WORKFLOW_ID ORDER BY th1.TASK_COMPLETION_TIME DESC) AS DENSE_RANK,
		          th1.ID,
              TASK_RUN_ID,
		          th1.WORKFLOW_ID
		        FROM
		          FFF_STAGING.TIMESERIES_HEADER th1
		        WHERE
              -- If a workflow spans plots and filters the forecast flag in the timeseries header
              -- record is set to 1. As such, do not include it when filtering data.
		          EXISTS
			        (
			          SELECT
				          1
			          FROM
				          FFF_STAGING.TIMESERIES_HEADER th2
				          INNER JOIN FFF_STAGING.NON_DISPLAY_GROUP_WORKFLOW ndgw
                    WITH
                      (TABLOCK HOLDLOCK)
                    ON ndgw.WORKFLOW_ID = th2.WORKFLOW_ID
			          WHERE
                  ndgw.TIMESERIES_TYPE IN ('external_forecasting', 'simulated_forecasting') AND
                  th1.ID = th2.ID
			        )
          ) AS tr -- All task runs (timeseries headers) for each forecast workflow
          WHERE
            tr.DENSE_RANK = 1
      ),
      -- The latest timeseries staging exception associated with a current forecast.
      lftse_cte (TIMESERIES_STAGING_EXCEPTION_ID, TIMESERIES_HEADER_ID, SOURCE_ID, SOURCE_TYPE, DESCRIPTION, EXCEPTION_TIME) AS
      (
        SELECT
          rtse.ID AS TIMESERIES_STAGING_EXCEPTION_ID,
          rtse.TIMESERIES_HEADER_ID,
          rtse.SOURCE_ID,
          rtse.SOURCE_TYPE,
          rtse.DESCRIPTION,
          rtse.EXCEPTION_TIME
        FROM
          (
            SELECT
              DENSE_RANK() OVER(PARTITION BY tse.TIMESERIES_HEADER_ID, tse.SOURCE_ID ORDER BY tse.EXCEPTION_TIME DESC) AS DENSE_RANK,
              tse.ID,
              tse.TIMESERIES_HEADER_ID,
              tse.SOURCE_ID,
              tse.SOURCE_TYPE,
              tse.DESCRIPTION,
              tse.EXCEPTION_TIME
            FROM
              FFF_STAGING.TIMESERIES_STAGING_EXCEPTION tse
              INNER JOIN lfth_cte ON lfth_cte.ID = tse.TIMESERIES_HEADER_ID
          ) AS rtse
        WHERE
          rtse.DENSE_RANK = 1
      )

      --  For the latest timeseries staging exception associated with each plot
      --  calculate the set of locations that have not been imported.
      SELECT
        th.TASK_RUN_ID,
        th.WORKFLOW_ID,
        ml.LOCATION_ID,
        tse.SOURCE_ID,
        tse.SOURCE_TYPE,
        tse.DESCRIPTION,
        tse.EXCEPTION_TIME,
        tse.ID AS TIMESERIES_STAGING_EXCEPTION_ID,
        tse.TIMESERIES_HEADER_ID
      FROM
        (
            (
              -- The set of coastal locations linked to the latest timeseries staging exception for each plot.
              SELECT
                lftse_cte.TIMESERIES_STAGING_EXCEPTION_ID,
                lfth_cte.ID AS TIMESERIES_HEADER_ID,
                cdgw.WORKFLOW_ID,
                VALUE AS LOCATION_ID
              FROM
                lfth_cte
                INNER JOIN lftse_cte ON lftse_cte.TIMESERIES_HEADER_ID = lfth_cte.ID
                INNER JOIN FFF_STAGING.COASTAL_DISPLAY_GROUP_WORKFLOW cdgw
                  WITH
                    (TABLOCK HOLDLOCK)
                  ON lfth_cte.WORKFLOW_ID = cdgw.WORKFLOW_ID AND lftse_cte.SOURCE_ID = cdgw.PLOT_ID
                    CROSS APPLY STRING_SPLIT(LOCATION_IDS, ';')
              UNION
              -- The set of fluvial locations linked to the latest timeseries staging exception for each plot.
              SELECT
                lftse_cte.TIMESERIES_STAGING_EXCEPTION_ID,
                lfth_cte.ID AS TIMESERIES_HEADER_ID,
                fdgw.WORKFLOW_ID,
                VALUE AS LOCATION_ID
              FROM
                lfth_cte
                INNER JOIN lftse_cte ON lftse_cte.TIMESERIES_HEADER_ID = lfth_cte.ID
                INNER JOIN FFF_STAGING.FLUVIAL_DISPLAY_GROUP_WORKFLOW fdgw
                  WITH
                    (TABLOCK HOLDLOCK)
                  ON lfth_cte.WORKFLOW_ID = fdgw.WORKFLOW_ID AND lftse_cte.SOURCE_ID = fdgw.PLOT_ID
                    CROSS APPLY STRING_SPLIT(LOCATION_IDS, ';')
             )
            EXCEPT
            -- The set of imported locations linked to the latest timeseries staging exception for each plot.
            SELECT
              lftse_cte.TIMESERIES_STAGING_EXCEPTION_ID,
              lfth_cte.ID AS TIMESERIES_HEADER_ID,
              lfth_cte.WORKFLOW_ID,
              VALUE AS LOCATION_ID
            FROM
              lfth_cte -- The latest task run (timeseries header) for each forecast workflow.
              INNER JOIN lftse_cte ON lftse_cte.TIMESERIES_HEADER_ID = lfth_cte.ID
              INNER JOIN FFF_STAGING.TIMESERIES t
                ON t.TIMESERIES_HEADER_ID = lfth_cte.ID AND
                t.TIMESERIES_HEADER_ID = lftse_cte.TIMESERIES_HEADER_ID AND
                t.TIMESERIES_HEADER_ID = lfth_cte.ID
              CROSS APPLY STRING_SPLIT(
                REPLACE(
                  SUBSTRING(t.FEWS_PARAMETERS, CHARINDEX('&locationIds=', t.FEWS_PARAMETERS),  CHARINDEX('&startTime=', t.FEWS_PARAMETERS) - CHARINDEX('&locationIds=', t.FEWS_PARAMETERS)),
                  '&locationIds=',
                  ';'
                ),
                ';'
              )
          ) ml
          INNER JOIN FFF_STAGING.TIMESERIES_HEADER th
            ON ml.TIMESERIES_HEADER_ID = th.ID
          INNER JOIN FFF_STAGING.TIMESERIES_STAGING_EXCEPTION tse
            ON ml.TIMESERIES_STAGING_EXCEPTION_ID = tse.ID AND
            ml.TIMESERIES_HEADER_ID = tse.TIMESERIES_HEADER_ID AND
            th.ID = tse.TIMESERIES_HEADER_ID]]>
    </sql>
    <rollback>
      <sql>
        IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_SCHEMA = 'FFF_STAGING' AND TABLE_NAME = 'V_ACTIVE_TIMESERIES_STAGING_EXCEPTION_FOR_MISSING_LOCATION')
          DROP VIEW FFF_STAGING.V_ACTIVE_TIMESERIES_STAGING_EXCEPTION_FOR_MISSING_LOCATION
      </sql>
    </rollback>
  </changeSet>
</databaseChangeLog>
